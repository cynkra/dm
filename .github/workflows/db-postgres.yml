on:
  push:
  pull_request:
  # for now, CRON jobs only run on the default branch of the repo (i.e. usually on master)
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 4 * * *"

name: db-postgres

jobs:
  db-tests:
    runs-on: ubuntu-16.04

    services:
      postgres:
        image: postgres
        ports:
        - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    name: r-${{ matrix.r }}

    strategy:
      fail-fast: false
      matrix:
        #r: ['3.3', '3.4', '3.5', '3.6', 'release']
        r: ['release']

    env:
      # [Custom env var]
      MODE: db-tests
      # [Custom env var]
      DM_TEST_SRC: test-postgres
      # [Custom env var]
      TIC_ONLY_TESTS: true
      # [Custom env var]
      CRAN: "https://packagemanager.rstudio.com/cran/__linux__/xenial/latest"
      # [Custom env var]
      ODBCSYSINI: ${{ github.workspace }}/.github/odbc
      # [Custom env var]
      _R_CHECK_FORCE_SUGGESTS_: false
      # [Custom env var]
      _R_CHECK_SYSTEM_CLOCK_: false
      # [Custom env var]
      _R_CHECK_PACKAGE_DEPENDS_IGNORE_MISSING_ENHANCES: true
      # [Custom env var]
      TIC_DEV_VERSIONS: ${{ matrix.config.TIC_DEV_VERSIONS }}
      # [Custom env var]
      TIC_ONLY_STYLER: ${{ matrix.config.TIC_ONLY_STYLER }}
      # otherwise remotes::fun() errors cause the build to fail. Example: Unavailability of binaries
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      # make sure to run `tic::use_ghactions_deploy()` to set up deployment
      TIC_DEPLOY_KEY: ${{ secrets.TIC_DEPLOY_KEY }}
      # prevent rgl issues because no X11 display is available
      RGL_USE_NULL: true
      # if you use bookdown or blogdown, replace "PKGDOWN" by the respective
      # capitalized term. This also might need to be done in tic.R
      TIC_BUILD_PKGDOWN: ${{ matrix.config.pkgdown }}
      # macOS >= 10.15.4 linking
      SDKROOT: /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
      # use GITHUB_TOKEN from GitHub to workaround rate limits in {remotes}
      GITHUB_PAT: ${{ secrets.DM_PAT }}

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.r}}

      - name: "[Linux] Prepare"
        if: runner.os == 'Linux'
        run: |
          sudo apt install libcurl4-openssl-dev
          Rscript -e "if (!requireNamespace('remotes')) install.packages('remotes', type = 'source')"
          Rscript -e "if (getRversion() < '3.2' && !requireNamespace('curl')) install.packages('curl', type = 'source')"
          sudo apt install libglpk-dev # igraph
          sudo apt install libv8-dev # v8

      - name: Install PostgreSQL Driver
        run: |
          sudo apt-get install -y unixodbc-dev odbc-postgresql devscripts

      - name: "[Stage] Install"
        if: matrix.config.os != 'macOS-latest' || matrix.config.r != 'devel'
        run: Rscript -e "remotes::install_github('ropensci/tic')" -e "print(tic::dsl_load())" -e "tic::prepare_all_stages()" -e "tic::before_install()" -e "tic::install()"

      - name: "[Stage] Script"
        run: Rscript -e 'tic::script()'
        env:
          LIB_DIR: /usr/lib/x86_64-linux-gnu/
          INCLUDE_DIR: /usr/include

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
