% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/repair_constraints.R
\name{dm_repair_constraints}
\alias{dm_repair_constraints}
\title{Repair a data model's constraints}
\usage{
dm_repair_constraints(
  dm,
  fk_repair = c("insert", "delete"),
  pk_repair = TRUE,
  progress = NA,
  in_place = NULL
)
}
\arguments{
\item{dm}{A dm object}

\item{fk_repair}{Either \code{"insert"} or \code{"delete"}, \code{"insert"} will update
the parent table by adding the missing primary keys while \code{"delete"}
will remove from the child table the rows featuring the orphan foreign keys.}

\item{pk_repair}{Primary key duplicate disambiguation strategy, WIP. defaults
to \code{TRUE} so it's not \code{NULL}.}

\item{progress}{Whether to display a progress bar, if \code{NA} (the default)
hide in non-interactive mode, show in interactive mode. Requires the
'progress' package.}

\item{in_place}{Should \code{x} be modified in place? This argument is only
relevant for mutable backends (e.g. databases, data.tables).

When \code{TRUE}, a modified version of \code{x} is returned invisibly;
when \code{FALSE}, a new object representing the resulting changes is returned.}
}
\value{
a dm
}
\description{
Repair a data model's constraints
}
\examples{
nycflights <- dm_nycflights13()

# The dm doesn't satisfy its constraints
dm_examine_constraints(nycflights)

repaired_insert <-
  nycflights \%>\%
  dm_repair_constraints("insert")

repaired_delete <-
  nycflights \%>\%
  dm_repair_constraints("delete")

# both repaired dms satisfy all constraints
dm_examine_constraints(repaired_insert)
dm_examine_constraints(repaired_delete)

# but we have more planes in repaired_insert and less flights in repaired_delete
nrow(nycflights$planes)
nrow(nycflights$flights)

nrow(repaired_insert$planes)
nrow(repaired_insert$flights)

nrow(repaired_delete$planes)
nrow(repaired_delete$flights)


}
