% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/csv.R
\name{dm_duckdb_csv}
\alias{dm_duckdb_csv}
\title{Create dm object based on remote csv files}
\usage{
dm_duckdb_csv(path = ".", conn)
}
\arguments{
\item{path}{Path to directory from where csv files has to be read from.
Directory can have sub-directories in case of partitioned data.}

\item{conn}{Connection object to duckdb. See \code{\link[duckdb:duckdb]{duckdb::duckdb()}} for details.}
}
\value{
A \code{dm} object.
}
\description{
Function takes path to directory where multiple tables are stored in csv
files and creates \code{dm} from those tables. It uses \code{duckdb} to create remote
\code{tbl} objects which are then used as tables for \code{dm} object.
}
\details{
Function operates on remote tables, therefore data are not being loaded to R.
The are following consequences of that:
\itemize{
\item{ Size of data can exceed machine's memory limit. }
\item{ Queries run against csv are likely to be slower than if data are
loaded into R's memory. }
\item{ Performance of queries can be improved by partitioning csv files. }
\item{ Data can be inserted or updated in csv files directly and changes will be
reflected on the next query. There is no need to reload data. }
}
}
\section{Partitioning}{

Tables provided in csv files can be partitioned. This will likely bring
significant performance improvement in case when queries do not need to
access data from all partitions. Structure for partitioned data in csv files
must follow \href{https://duckdb.org/docs/data/partitioning/hive_partitioning}{duckdb's Hive Partitioning} documentation.
Partitioning can support nested partitioning, but not recursively nested.
So the following are supported:
\preformatted{
  path/flights/year=2013/*.csv
  path/flights/year=2014/*.csv

  path/transactions/year=2013/month=1/*.csv
  path/transactions/year=2013/month=2/*.csv
}
}

\examples{
if (!requireNamespace("duckdb", quietly=TRUE))
  stop("'duckdb' package must be installed in order to use dm_duckdb_csv()")

## create example source data directory
path <- file.path(tempdir(), "data")
dir.create(path, showWarnings=FALSE)
x <- dm_nycflights13()
tbl_export_csv <- function(tbl, dm) {
  file <- file.path(path, paste(tbl, "csv", sep="."))
  utils::write.csv(dm[[tbl]], file=file, row.names=FALSE)
}
invisible(lapply(names(x), tbl_export_csv, x))
list.files(path)

## create dm from remote csv files via duckdb
conn <- DBI::dbConnect(duckdb::duckdb(), dbdir=":memory:")
d <- dm_duckdb_csv(path, conn)
d

## cleanup db connection
DBI::dbDisconnect(conn)
}
